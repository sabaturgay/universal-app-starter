scalar DateTime

type BatchPayload {
  count: Int!
}

enum PostScalarFieldEnum {
  id
  slug
  title
  body
  userId
}

enum CommentScalarFieldEnum {
  id
  postId
  comment
}

enum UserScalarFieldEnum {
  id
  email
  name
  username
}

enum SortOrder {
  asc
  desc
}

enum QueryMode {
  default
  insensitive
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  slug: StringFilter
  title: StringFilter
  body: StringFilter
  comments: CommentListRelationFilter
  user: UserWhereInput
  userId: StringFilter
}

input PostOrderByInput {
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  body: SortOrder
  userId: SortOrder
}

input PostWhereUniqueInput {
  id: String
  slug: String
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  body: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  post: PostWhereInput
  postId: StringFilter
  comment: StringFilter
}

input CommentOrderByInput {
  id: SortOrder
  postId: SortOrder
  comment: SortOrder
}

input CommentWhereUniqueInput {
  id: String
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  postId: StringWithAggregatesFilter
  comment: StringWithAggregatesFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  name: StringNullableFilter
  username: StringNullableFilter
  posts: PostListRelationFilter
}

input UserOrderByInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  username: SortOrder
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
}

input PostCreateInput {
  id: String
  slug: String!
  title: String!
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostUncheckedCreateInput {
  id: String
  slug: String!
  title: String!
  body: String!
  userId: String!
  comments: CommentUncheckedCreateNestedManyWithoutPostInput
}

input PostUpdateInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUncheckedUpdateInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  comments: CommentUncheckedUpdateManyWithoutPostInput
}

input PostCreateManyInput {
  id: String
  slug: String!
  title: String!
  body: String!
  userId: String!
}

input PostUpdateManyMutationInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
}

input PostUncheckedUpdateManyInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input CommentCreateInput {
  id: String
  comment: String!
  post: PostCreateNestedOneWithoutCommentsInput!
}

input CommentUncheckedCreateInput {
  id: String
  postId: String!
  comment: String!
}

input CommentUpdateInput {
  comment: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUncheckedUpdateInput {
  postId: StringFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
}

input CommentCreateManyInput {
  id: String
  postId: String!
  comment: String!
}

input CommentUpdateManyMutationInput {
  comment: StringFieldUpdateOperationsInput
}

input CommentUncheckedUpdateManyInput {
  postId: StringFieldUpdateOperationsInput
  comment: StringFieldUpdateOperationsInput
}

input UserCreateInput {
  id: String
  email: String!
  name: String
  username: String
  posts: PostCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateInput {
  id: String
  email: String!
  name: String
  username: String
  posts: PostUncheckedCreateNestedManyWithoutUserInput
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserInput
}

input UserUncheckedUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  posts: PostUncheckedUpdateManyWithoutUserInput
}

input UserCreateManyInput {
  id: String
  email: String!
  name: String
  username: String
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  count: NestedIntFilter
  _min: NestedStringFilter
  min: NestedStringFilter
  _max: NestedStringFilter
  max: NestedStringFilter
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
  max: NestedStringNullableFilter
}

input CommentCreateNestedManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input UserCreateNestedOneWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  connect: UserWhereUniqueInput
}

input CommentUncheckedCreateNestedManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input StringFieldUpdateOperationsInput {
  set: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserUncheckedCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUncheckedUpdateWithoutPostsInput
}

input CommentUncheckedUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input PostCreateNestedOneWithoutCommentsInput {
  create: PostUncheckedCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostUncheckedCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUncheckedUpdateWithoutCommentsInput
}

input PostCreateNestedManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostUncheckedCreateNestedManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUncheckedUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  count: NestedIntFilter
  _min: NestedStringFilter
  min: NestedStringFilter
  _max: NestedStringFilter
  max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
  max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input CommentCreateWithoutPostInput {
  id: String
  comment: String!
}

input CommentUncheckedCreateWithoutPostInput {
  id: String
  comment: String!
}

input CommentCreateOrConnectWithoutPostInput {
  where: CommentWhereUniqueInput!
  create: CommentUncheckedCreateWithoutPostInput!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
}

input UserCreateWithoutPostsInput {
  id: String
  email: String!
  name: String
  username: String
}

input UserUncheckedCreateWithoutPostsInput {
  id: String
  email: String!
  name: String
  username: String
}

input UserCreateOrConnectWithoutPostsInput {
  where: UserWhereUniqueInput!
  create: UserUncheckedCreateWithoutPostsInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUncheckedUpdateWithoutPostInput!
  create: CommentUncheckedCreateWithoutPostInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUncheckedUpdateWithoutPostInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  where: CommentScalarWhereInput!
  data: CommentUncheckedUpdateManyWithoutCommentsInput!
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  id: StringFilter
  postId: StringFilter
  comment: StringFilter
}

input UserUpsertWithoutPostsInput {
  update: UserUncheckedUpdateWithoutPostsInput!
  create: UserUncheckedCreateWithoutPostsInput!
}

input UserUpdateWithoutPostsInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutPostsInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input PostCreateWithoutCommentsInput {
  id: String
  slug: String!
  title: String!
  body: String!
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostUncheckedCreateWithoutCommentsInput {
  id: String
  slug: String!
  title: String!
  body: String!
  userId: String!
}

input PostCreateOrConnectWithoutCommentsInput {
  where: PostWhereUniqueInput!
  create: PostUncheckedCreateWithoutCommentsInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUncheckedUpdateWithoutCommentsInput!
  create: PostUncheckedCreateWithoutCommentsInput!
}

input PostUpdateWithoutCommentsInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUncheckedUpdateWithoutCommentsInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input PostCreateWithoutUserInput {
  id: String
  slug: String!
  title: String!
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
}

input PostUncheckedCreateWithoutUserInput {
  id: String
  slug: String!
  title: String!
  body: String!
  comments: CommentUncheckedCreateNestedManyWithoutPostInput
}

input PostCreateOrConnectWithoutUserInput {
  where: PostWhereUniqueInput!
  create: PostUncheckedCreateWithoutUserInput!
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUncheckedUpdateWithoutUserInput!
  create: PostUncheckedCreateWithoutUserInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUncheckedUpdateWithoutUserInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  where: PostScalarWhereInput!
  data: PostUncheckedUpdateManyWithoutPostsInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: StringFilter
  slug: StringFilter
  title: StringFilter
  body: StringFilter
  userId: StringFilter
}

input CommentCreateManyPostInput {
  id: String
  comment: String!
}

input CommentUpdateWithoutPostInput {
  comment: StringFieldUpdateOperationsInput
}

input CommentUncheckedUpdateWithoutPostInput {
  comment: StringFieldUpdateOperationsInput
}

input CommentUncheckedUpdateManyWithoutCommentsInput {
  comment: StringFieldUpdateOperationsInput
}

input PostCreateManyUserInput {
  id: String
  slug: String!
  title: String!
  body: String!
}

input PostUpdateWithoutUserInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUncheckedUpdateWithoutUserInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUncheckedUpdateManyWithoutPostInput
}

input PostUncheckedUpdateManyWithoutPostsInput {
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
}

type AggregatePost {
  _count: PostCountAggregateOutputType
  count: PostCountAggregateOutputType
  _min: PostMinAggregateOutputType
  min: PostMinAggregateOutputType
  _max: PostMaxAggregateOutputType
  max: PostMaxAggregateOutputType
}

type AggregateComment {
  _count: CommentCountAggregateOutputType
  count: CommentCountAggregateOutputType
  _min: CommentMinAggregateOutputType
  min: CommentMinAggregateOutputType
  _max: CommentMaxAggregateOutputType
  max: CommentMaxAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  count: UserCountAggregateOutputType
  _min: UserMinAggregateOutputType
  min: UserMinAggregateOutputType
  _max: UserMaxAggregateOutputType
  max: UserMaxAggregateOutputType
}

type PostCountOutputType {
  comments: Int!
}

type PostCountAggregateOutputType {
  id: Int!
  slug: Int!
  title: Int!
  body: Int!
  userId: Int!
  _all: Int!
}

type PostMinAggregateOutputType {
  id: String
  slug: String
  title: String
  body: String
  userId: String
}

type PostMaxAggregateOutputType {
  id: String
  slug: String
  title: String
  body: String
  userId: String
}

type CommentCountAggregateOutputType {
  id: Int!
  postId: Int!
  comment: Int!
  _all: Int!
}

type CommentMinAggregateOutputType {
  id: String
  postId: String
  comment: String
}

type CommentMaxAggregateOutputType {
  id: String
  postId: String
  comment: String
}

type UserCountOutputType {
  posts: Int!
}

type UserCountAggregateOutputType {
  id: Int!
  email: Int!
  name: Int!
  username: Int!
  _all: Int!
}

type UserMinAggregateOutputType {
  id: String
  email: String
  name: String
  username: String
}

type UserMaxAggregateOutputType {
  id: String
  email: String
  name: String
  username: String
}

type Post {
  id: String!
  slug: String!
  title: String!
  body: String!
  comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    cursor: CommentWhereUniqueInput
    take: Int
    skip: Int
    distinct: CommentScalarFieldEnum
  ): [Comment!]!
  user: User!
  userId: String!
  _count: PostCountOutputType
}

type Query {
  findUniquePost(where: PostWhereUniqueInput!): Post
  findFirstPost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostScalarFieldEnum
    skip: Int
    take: Int
  ): Post
  findManyPost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostScalarFieldEnum
    skip: Int
    take: Int
  ): [Post!]
  findManyPostCount(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostScalarFieldEnum
    skip: Int
    take: Int
  ): Int!
  aggregatePost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostScalarFieldEnum
    skip: Int
    take: Int
  ): AggregatePost
  findUniqueComment(where: CommentWhereUniqueInput!): Comment
  findFirstComment(
    where: CommentWhereInput
    orderBy: [CommentOrderByInput!]
    cursor: CommentWhereUniqueInput
    distinct: CommentScalarFieldEnum
    skip: Int
    take: Int
  ): Comment
  findManyComment(
    where: CommentWhereInput
    orderBy: [CommentOrderByInput!]
    cursor: CommentWhereUniqueInput
    distinct: CommentScalarFieldEnum
    skip: Int
    take: Int
  ): [Comment!]
  findManyCommentCount(
    where: CommentWhereInput
    orderBy: [CommentOrderByInput!]
    cursor: CommentWhereUniqueInput
    distinct: CommentScalarFieldEnum
    skip: Int
    take: Int
  ): Int!
  aggregateComment(
    where: CommentWhereInput
    orderBy: [CommentOrderByInput!]
    cursor: CommentWhereUniqueInput
    distinct: CommentScalarFieldEnum
    skip: Int
    take: Int
  ): AggregateComment
  findUniqueUser(where: UserWhereUniqueInput!): User
  findFirstUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    skip: Int
    take: Int
  ): User
  findManyUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    skip: Int
    take: Int
  ): [User!]
  findManyUserCount(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    skip: Int
    take: Int
  ): Int!
  aggregateUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserScalarFieldEnum
    skip: Int
    take: Int
  ): AggregateUser
  extend: String
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  updateOnePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  upsertOnePost(
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
  ): Post
  deleteManyPost(where: PostWhereInput): BatchPayload
  updateManyPost(
    where: PostWhereInput
    data: PostUpdateManyMutationInput
  ): BatchPayload
  createOneComment(data: CommentCreateInput!): Comment!
  updateOneComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  upsertOneComment(
    where: CommentWhereUniqueInput!
    create: CommentCreateInput!
    update: CommentUpdateInput!
  ): Comment
  deleteManyComment(where: CommentWhereInput): BatchPayload
  updateManyComment(
    where: CommentWhereInput
    data: CommentUpdateManyMutationInput
  ): BatchPayload
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  upsertOneUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User
  deleteManyUser(where: UserWhereInput): BatchPayload
  updateManyUser(
    where: UserWhereInput
    data: UserUpdateManyMutationInput
  ): BatchPayload
  extend: String
}

type Comment {
  id: String!
  post: Post!
  postId: String!
  comment: String!
}

type User {
  id: String!
  email: String!
  name: String
  username: String
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    cursor: PostWhereUniqueInput
    take: Int
    skip: Int
    distinct: PostScalarFieldEnum
  ): [Post!]!
  _count: UserCountOutputType
}
